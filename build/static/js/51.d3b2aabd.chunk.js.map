{"version":3,"sources":["views/pages/subAdmin/brands/component/deleteBrandDialog.js","views/pages/subAdmin/brands/component/brandTable.js","views/pages/subAdmin/brands/component/addUpdateBrand.js","views/pages/subAdmin/brands/index.js","ui-component/extended/Avatar.js","shared/Card/HeadingCard.js","shared/component/FileInput.js"],"names":["Transition","forwardRef","props","ref","_jsx","Slide","_objectSpread","direction","DeleteBrandDialog","_ref","open","setOpen","brandId","page","limit","search","theme","useTheme","dispatch","useDispatch","handleClose","_Fragment","children","_jsxs","Dialog","TransitionComponent","keepMounted","DialogTitle","id","className","DialogContent","DialogContentText","Typography","variant","component","DialogActions","sx","pr","Button","color","palette","error","dark","borderColor","onClick","size","deleteBrand","BrandTable","brandsList","navigate","setAddUpdateOpen","setBrandData","useNavigate","_useState","useState","_useState2","_slicedToArray","deleteOpen","setDeleteOpen","_useState3","_useState4","TableContainer","undefined","brands","count","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","map","row","index","_defineProperty","display","textTransform","Grid","item","lg","Avatar","alt","src","image","name","moment","createdAt","format","updatedAt","Stack","justifyContent","alignItems","Tooltip","placement","title","IconButton","state","brandData","AccountCircleIcon","fontSize","DashboardIcon","style","padding","fontWeight","container","width","m","CircularProgress","AddUpdateBrandDialog","isUpdate","setIsUpdate","useEffect","validationSchema","Yup","default","required","max","location","description","when","is","then","otherwise","test","value","formik","useFormik","enableReinitialize","initialValues","onSubmit","values","isValid","split","pop","toast","errorHandler","addBrand","updateBrand","user","resetForm","maxWidth","autoComplete","handleSubmit","xs","md","InputLabel","htmlFor","TextField","onChange","handleChange","touched","Boolean","errors","helperText","fullWidth","pt","ml","FileInput","accept","fieldName","placeHolder","Divider","margin","AnimateButton","type","background","disableElevation","Brands","useSelector","auth","brand","brandsByAdminList","setSearch","setPage","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","addUpdateOpen","_useState11","_useState12","getAllBrandsByAdmin","HeadingCard","MainCard","spacing","marginLeft","OutlinedInput","placeholder","startAdornment","InputAdornment","position","IconSearch","stroke","e","target","content","p","gridSpacing","Pagination","textAlign","showFirstButton","showLastButton","pages","event","newPage","outline","others","_objectWithoutProperties","_excluded","colorSX","paper","bgcolor","concat","outlineSX","border","sizeSX","height","MuiAvatar","role","setValue","options","Box","marginTop","mode","select","option","MenuItem","label","_formik$values","_formik$values$name","_formik$values2","_formik$values3","_formik$values3$name","_formik$values4","fileRef1","useRef","Fragment","current","click","AddCircleOutlinedIcon","hidden","setFieldValue","currentTarget","files","length","mt","substring","toFixed","CloseOutlinedIcon"],"mappings":"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","file":"static/js/51.d3b2aabd.chunk.js","sourcesContent":["import { forwardRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\nimport { deleteBrand } from '../../../../../redux/brand/actions';\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\nexport default function DeleteBrandDialog({ open, setOpen, brandId, page, limit, search }) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                // onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title1\"\n                aria-describedby=\"alert-dialog-slide-description1\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title1\"\n                className=\"statusHeading\">Delete Brand</DialogTitle>\n\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\">\n                            Are you sure you want to delete this Brand?\n                        </Typography>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\n                        onClick={handleClose}\n                        color=\"secondary\"  className='buttonSize' size='large' \n                    >\n                        No\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        className='buttonSize' size='large' \n                        onClick={() => {\n                            dispatch(\n                                deleteBrand({\n                                    id: brandId,\n                                    handleClose: handleClose,\n                                    page: page,\n                                    limit: limit,\n                                    search: search\n                                })\n                            );\n                        }}\n                    >\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import { useState } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport { useNavigate } from 'react-router-dom';\nimport {\n    IconButton,\n    Stack,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Tooltip,\n    Grid,\n    Typography,\n    CircularProgress\n} from '@mui/material';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\nimport DeleteBrandDialog from './deleteBrandDialog';\nimport Avatar from 'ui-component/extended/Avatar';\nimport moment from 'moment';\nimport DashboardIcon from '@mui/icons-material/Dashboard';\nimport AccountCircleIcon from '@mui/icons-material/AccountCircle';\nconst BrandTable = ({ brandsList, page, limit, search, setAddUpdateOpen, setBrandData }) => {\n    const theme = useTheme();\n    const navigate = useNavigate();\n    const [deleteOpen, setDeleteOpen] = useState(false);\n    const [brandId, setBrandId] = useState();\n    return (\n        <TableContainer>\n            <DeleteBrandDialog open={deleteOpen} setOpen={setDeleteOpen} brandId={brandId} page={page} limit={limit} search={search} />\n\n            {brandsList?.brands != undefined ? (\n                <>\n                    {brandsList?.count > 0 ? (\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align=\"center\" sx={{ borderBottom: 'none' }}></TableCell>\n                                    <TableCell align=\"left \" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                                        Brand name\n                                    </TableCell>\n                                    {/*   <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Location</TableCell>\n                        <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Description</TableCell> */}\n\n                                    <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                                        Created At\n                                    </TableCell>\n                                    <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                                        Updated At\n                                    </TableCell>\n                                    <TableCell align=\"center\" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                                        Actions\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                <>\n                                    {brandsList.brands != undefined &&\n                                        brandsList.brands.map((row, index) => (\n                                            <TableRow>\n                                                <TableCell align=\"right\" sx={{ borderBottom: 'none' }}></TableCell>\n                                                <TableCell\n                                                    sx={{\n                                                        display: 'flex',\n                                                        borderBottom: 'none',\n                                                        textTransform: 'capitalize',\n                                                        borderBottom: 'none'\n                                                    }}\n                                                >\n                                                    <Grid item lg={6}>\n                                                        <Avatar alt=\"Brand Image\" src={row.image} sx={{}} />\n                                                    </Grid>\n                                                    <Grid item lg={6} className=\"tableName\">\n                                                        {row.name}\n                                                    </Grid>\n                                                </TableCell>\n                                                {/*       <TableCell  className='tablecell' sx={{ textTransform: 'capitalize' ,  borderBottom: 'none'}}>\n                                            {row.location}\n                                        </TableCell>\n                                        <TableCell  className='tablecell' sx={{ textTransform: 'capitalize' ,  borderBottom: 'none'}}>\n                                            {row.description}\n                                        </TableCell> */}\n\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\n                                                    {moment(row.createdAt).format('DD-MMM-YYYY')}\n                                                </TableCell>\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\n                                                    {moment(row.updatedAt).format('DD-MMM-YYYY')}\n                                                </TableCell>\n                                                <TableCell className=\"tablecell\" sx={{ borderBottom: 'none', textTransform: 'capitalize' }}>\n                                                    <Stack\n                                                        direction=\"row\"\n                                                        className=\"tablecell\"\n                                                        justifyContent=\"center\"\n                                                        alignItems=\"center\"\n                                                    >\n                                                        <Tooltip placement=\"top\" title=\"Brand Admin\">\n                                                            <IconButton\n                                                                className=\"color\"\n                                                                aria-label=\"detail\"\n                                                                size=\"medium\"\n                                                                onClick={() => {\n                                                                    navigate('/brands/admin', {\n                                                                        state: {\n                                                                            brandData: row\n                                                                        }\n                                                                    });\n                                                                }}\n                                                            >\n                                                                <AccountCircleIcon sx={{ fontSize: '1.5rem' }} />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        <Tooltip placement=\"top\" title=\"Add Brand Categories\">\n                                                            <IconButton\n                                                                className=\"color\"\n                                                                aria-label=\"detail\"\n                                                                size=\"medium\"\n                                                                onClick={() => {\n                                                                    navigate('/brandsByAdmin/category', {\n                                                                        state: {\n                                                                            brandData: row\n                                                                        }\n                                                                    });\n                                                                }}\n                                                            >\n                                                                <DashboardIcon sx={{ fontSize: '1.5rem' }} />\n                                                            </IconButton>\n                                                        </Tooltip>\n                                                        {/* <Tooltip placement=\"top\" title=\"Edit\">\n                                                            <IconButton\n                                                                className=\"color\"\n                                                                aria-label=\"Edit\"\n                                                                size=\"large\"\n                                                                onClick={() => {\n                                                                    setAddUpdateOpen(true);\n                                                                    setBrandData({\n                                                                        id: row.id,\n                                                                        name: row.name,\n                                                                        description: row.description,\n                                                                        location: row.location,\n                                                                        image: null\n                                                                    });\n                                                                }}\n                                                            >\n                                                                <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                                            </IconButton>\n                                                        </Tooltip> */}\n                                                        {/* <Tooltip placement=\"top\" title=\"Delete\">\n                                                            <IconButton\n                                                                color=\"primary\"\n                                                                sx={{\n                                                                    color: theme.palette.orange.dark,\n                                                                    borderColor: theme.palette.orange.main,\n                                                                    '&:hover ': { background: theme.palette.orange.light }\n                                                                }}\n                                                                size=\"large\"\n                                                                onClick={() => {\n                                                                    setDeleteOpen(true);\n                                                                    setBrandId(row.id);\n                                                                }}\n                                                            >\n                                                                <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                                            </IconButton>\n                                                        </Tooltip> */}\n                                                    </Stack>\n                                                </TableCell>\n                                            </TableRow>\n                                        ))}\n                                </>\n                            </TableBody>\n                        </Table>\n                    ) : (\n                        <>\n                            <Grid item>\n                                <Typography className=\"statustypo\" style={{ padding: '20px 20px 20px 70px', fontWeight: '500' }}>\n                                    No Data Available\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto ' }}>\n                        <Grid item>\n                            <CircularProgress size={'4rem'} />\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </TableContainer>\n    );\n};\n\nexport default BrandTable;\n","import { forwardRef, useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Grid, Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, TextField, Divider, InputLabel } from '@mui/material';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { addBrand, updateBrand } from '../../../../../redux/brand/actions';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport FileInput from '../../../../../shared/component/FileInput';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\n\nexport default function AddUpdateBrandDialog({ brandData, page, limit, search, open, setOpen }) {\n    // const user = useSelector((state) => state.auth.user);\n    \n    const dispatch = useDispatch();\n    const [isUpdate, setIsUpdate] = useState(false);\n\n    useEffect(() => {\n        if (brandData.id == null) {\n            setIsUpdate(false);\n        } else {\n            setIsUpdate(true);\n        }\n    }, [brandData]);\n\n    const validationSchema = Yup.object({\n        isUpdate: Yup.boolean().default(isUpdate),\n        name: Yup.string()\n            .required('Brand Name is required!')\n            .max(42, 'Brand Name can not exceed 42 characters'),\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Brand name'),\n        location: Yup.string()\n            .required('Location is required!')\n            .max(42, 'Location can not exceed 42 characters'),  \n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Location'),\n        description: Yup.string()\n            .required('Brand is required!')\n            .max(400, 'Brand can not exceed 400 characters'),\n            // .matches(/^[-a-zA-Z0-9-()]+(\\s+[-a-zA-Z0-9-()]+)*$/, 'Invalid Description'),\n        image: Yup.mixed().when(['isUpdate'], {\n            is: true,\n            then: Yup.mixed(),\n            otherwise: Yup.mixed().required('Image is required')\n        })\n        .test('image size',\n         'this image is too large', (value) => !value || (value && value.size <= 1_000_000))\n\n    });\n    const errorHandler = (values) => {\n        if (values.image) {\n            if (\n                values.image.name.split('.').pop() == 'jpg' ||\n                values.image.name.split('.').pop() == 'png' ||\n                values.image.name.split('.').pop() == 'jpeg '\n            ) {\n                return true;\n            } else {\n                toast.error('Upload the files with these extensions: jpg, png, jpeg');\n                return false;\n            }\n        }\n        return true;\n    };\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: brandData,\n        validationSchema,\n        onSubmit: (values) => {\n            const isValid = errorHandler(values);\n            if (isValid) {\n                if (brandData.id == null) {\n                    dispatch(\n                        addBrand({\n                            name: values.name,\n                            description: values.description,\n                            location: values.location,\n                            image: values.image,\n                            page: page,\n                            limit: limit,\n                            search: search,\n                            handleClose: handleClose\n                        })\n                    );\n                } else {\n                    dispatch(\n                        updateBrand({\n                            brandId: brandData.id,\n                            name: values.name,\n                            description: values.description,\n                            location: values.location,\n                            image: values.image,\n                            page: page,\n                            limit: limit,\n                            search: search,\n                            id: user.id,\n                            handleClose: handleClose\n                        })\n                    );\n                }\n            }\n        }\n    });\n    const handleClose = () => {\n        setOpen(false);\n        formik.resetForm();\n    };\n\n    return (\n        <>\n            <Dialog\n                open={open}\n                // onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                className=\"createDialog dialog\"\n                maxWidth=\"md\"\n                TransitionComponent={Transition}\n                keepMounted\n                aria-describedby=\"alert-dialog-slide-description1\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title1\" className=\"adminname\">\n                    {brandData.id == null ? 'Create Brand' : 'Update Brand'}\n                </DialogTitle>\n                \n                <DialogContent>\n                    <form autoComplete=\"off\" onSubmit={formik.handleSubmit}>\n                        <Grid container>\n                        <Grid item xs={12} md={12} lg={12} >\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\" className=\"textfieldStyle\">\n                                    Name\n                                </InputLabel>\n                                <TextField\n                                className='field'\n                                    id=\"name\"\n                                    name=\"name\"\n                                    variant=\"standard\"\n                                    value={formik.values.name}\n                                    onChange={formik.handleChange}\n                                    error={formik.touched.name && Boolean(formik.errors.name)}\n                                    helperText={formik.touched.name && formik.errors.name}\n                                    fullWidth\n                                    autoComplete=\"given-name\"\n                                />\n                            </Grid>\n                            <Grid item xs={12} md={12} lg={12} pt={2}>\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\"   className='textfieldStyle'>Location</InputLabel>\n                                <TextField\n                                className='field'\n                                    id=\"location\"\n                                    name=\"location\"  variant=\"standard\"\n                                    value={formik.values.location}\n                                    onChange={formik.handleChange}\n                                    error={formik.touched.location && Boolean(formik.errors.location)}\n                                    helperText={formik.touched.location && formik.errors.location}\n                                    fullWidth\n                                  \n                                />\n                            </Grid>\n                            <Grid item xs={12} md={12} lg={12} pt={2}>\n                                <InputLabel htmlFor=\"outlined-adornment-password-login\"   className='textfieldStyle'>Description</InputLabel>\n                                <TextField\n                                className='field'\n                                    id=\"description\"\n                                    name=\"description\"  variant=\"standard\"\n                                    value={formik.values.description}\n                                    onChange={formik.handleChange}\n                                    error={formik.touched.description && Boolean(formik.errors.description)}\n                                    helperText={formik.touched.description && formik.errors.description}\n                                    fullWidth\n                                  \n                                />\n                            </Grid>\n                            <Grid item xs={12} md={12} lg={12} pt={2} sx={{ml:{md:'-15px', lg:'-15px'}}}>\n                                <FileInput   className='textfieldStyle' variant=\"standard\" formik={formik} accept=\"image/*\" fieldName=\"image\" placeHolder=\"Add Brand Image\" />\n                            </Grid>\n                        </Grid>\n                    </form>\n                </DialogContent>\n                <Divider />\n                <DialogActions sx={{ display:'block',  margin:'10px 10px 0px 20px' }}>\n                    <AnimateButton>\n                        <Button\n                            type=\"submit\"\n                            className='buttons' size='large' \n                            variant=\"contained\"\n                            sx={{ width: '92%',\n                            margin: '0px 0px 10px 8px',  \n                            background: 'linear-gradient(97.63deg, #2F57FF 0%, #2FA3FF 108.45%)' ,\n                           }}\n                            onClick={() => {\n                                formik.handleSubmit();\n                            }}\n                            \n                            disableElevation\n                        >\n                            {brandData.id == null ? 'Create' : 'Update'}\n                        </Button>\n                        </AnimateButton>\n                        <AnimateButton>\n                        <Button\n                            variant=\"outlined\"\n                            sx={{ width: '95%',\n                            margin: '0px 0px 10px 0px',   color: '#4044ED'  }}\n                            onClick={handleClose}\n                            \n                            className='buttons' size='large' \n                        >\n                            Cancel\n                        </Button>\n                    </AnimateButton>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { gridSpacing } from 'store/constant';\nimport { useTheme } from '@mui/material/styles';\nimport BrandTable from './component/brandTable';\nimport {\n    CircularProgress,\n    Button,\n    Typography,\n    Grid,\n    MenuItem,\n    TextField,\n    Menu,\n    Pagination,\n    OutlinedInput,\n    InputAdornment,\n    Divider\n} from '@mui/material';\nimport { IconSearch } from '@tabler/icons';\nimport { getAllBrands, getAllBrandsByAdmin } from '../../../../redux/brand/actions';\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\nimport AddUpdateBrandDialog from './component/addUpdateBrand';\nimport MainCard from 'ui-component/cards/MainCard';\nimport HeadingCard from 'shared/Card/HeadingCard';\n\nconst Brands = () => {\n    const user = useSelector((state) => state.auth.user);\n    \n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const brandsList = useSelector((state) => state.brand.brandsByAdminList);\n\n    const [search, setSearch] = useState('');\n    const [page, setPage] = useState(1);\n    const [limit, setLimit] = useState(10);\n    const [brandData, setBrandData] = useState({\n        id: null,\n        name: '',\n        description: '',\n        image: null,\n        location: ''\n    });\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\n    const [anchorEl, setAnchorEl] = useState(null);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseMenu = () => {\n        setAnchorEl(null);\n    };\n\n\n    useEffect(() => {\n        \n\n            dispatch(\n                getAllBrandsByAdmin({\n                    search: search,\n                    page: page,\n                    limit: limit,\n                    id: user.id\n                })\n            );\n        \n    }, [search, page, limit]);\n\n    return (\n        <>\n            <AddUpdateBrandDialog\n                brandData={brandData}\n                page={page}\n                limit={limit}\n                search={search}\n                open={addUpdateOpen}\n                setOpen={setAddUpdateOpen}\n            />\n            <HeadingCard title=\"Brand Management\" />\n            {/*    // <Grid container spacing={4} >\n            //         <Grid item xs={6} lg={8} >\n            //         <Typography className='mainheading' variant=\"h1\" component=\"h2\" sx={{marginLeft:{lg:'44px', md:'44px'}}}>\n            //         Brand Management\n            //       </Typography>\n            //       </Grid></Grid> */}\n\n            <MainCard\n                className=\"tableShadow\"\n                title={\n                    <Grid container spacing={4}>\n                        <Grid item xs={6} lg={8}>\n                            <Typography className=\"mainheading\" variant=\"h1\" component=\"h2\" sx={{ marginLeft: { lg: '44px', md: '44px' } }}>\n                                Brands\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={3} lg={2}>\n                            <OutlinedInput\n                                id=\"input-search-list-style1\"\n                                placeholder=\"Search\"\n                                startAdornment={\n                                    <InputAdornment position=\"end\">\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\n                                    </InputAdornment>\n                                }\n                                size=\"small\"\n                                onChange={(e) => {\n                                    setSearch(e.target.value);\n                                }}\n                            />\n                        </Grid>\n                            {/* <Grid item xs={3} lg={2} textAlign=\"start\">\n                                <Button\n                                    className=\"buttonSize\"\n                                    sx={{ marginLeft: { lg: '-16px', md: '-16px' } }}\n                                    variant=\"contained\"\n                                    size=\"large\"\n                                    onClick={() => {\n                                        setAddUpdateOpen(true);\n                                        setBrandData({ id: null, name: '', description: '', location: '', image: null });\n                                    }}\n                                >\n                                    Create\n                                </Button>\n                            </Grid> */}\n                    </Grid>\n                }\n                content={false}\n            >\n                <BrandTable\n                    brandsList={brandsList && brandsList}\n                    page={page}\n                    limit={limit}\n                    search={search}\n                    setAddUpdateOpen={setAddUpdateOpen}\n                    setBrandData={setBrandData}\n                />\n\n                <Grid item xs={12} sx={{ p: 3 }}>\n                    <Grid container justifyContent=\"center\" spacing={gridSpacing}>\n                        <Grid item>\n                            <Pagination\n                                textAlign=\"center\"\n                                color=\"primary\"\n                                showFirstButton\n                                showLastButton\n                                page={page}\n                                count={brandsList && brandsList.pages}\n                                onChange={(event, newPage) => {\n                                    setPage(newPage);\n                                }}\n                            />\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </MainCard>\n        </>\n    );\n};\n\nexport default Brands;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport MuiAvatar from '@mui/material/Avatar';\n\n// ==============================|| AVATAR ||============================== //\n\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\n    const theme = useTheme();\n\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\n    const outlineSX = outline && {\n        color: color ? `${color}.main` : `primary.main`,\n        bgcolor: theme.palette.background.paper,\n        border: '2px solid',\n        borderColor: color ? `${color}.main` : `primary.main`\n    };\n    let sizeSX = {};\n    switch (size) {\n        case 'badge':\n            sizeSX = {\n                width: theme.spacing(3.5),\n                height: theme.spacing(3.5)\n            };\n            break;\n        case 'xs':\n            sizeSX = {\n                width: theme.spacing(4.25),\n                height: theme.spacing(4.25)\n            };\n            break;\n        case 'sm':\n            sizeSX = {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            };\n            break;\n        case 'lg':\n            sizeSX = {\n                width: theme.spacing(9),\n                height: theme.spacing(9)\n            };\n            break;\n        case 'xl':\n            sizeSX = {\n                width: theme.spacing(10.25),\n                height: theme.spacing(10.25)\n            };\n            break;\n        case 'md':\n            sizeSX = {\n                width: theme.spacing(7.5),\n                height: theme.spacing(7.5)\n            };\n            break;\n        default:\n            sizeSX = {};\n    }\n\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\n};\n\nAvatar.propTypes = {\n    className: PropTypes.string,\n    color: PropTypes.string,\n    outline: PropTypes.bool,\n    size: PropTypes.string,\n    sx: PropTypes.object\n};\n\nexport default Avatar;\n","import { Box, Card, Grid, MenuItem, TextField, Typography } from '@mui/material';\n// material-ui\nimport { useTheme } from '@mui/material/styles';\n\nimport { forwardRef } from 'react';\nimport { gridSpacing } from 'store/constant';\n\n// constant\n\n// ==============================|| CUSTOM MAIN CARD ||============================== //\n\nconst HeadingCard = forwardRef(({ title, role, value, setValue, options }) => {\n    const theme = useTheme();\n\n    return (\n    \n            <Box sx={{ padding: '13px 20px 22px 20px' }}>\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\" spacing={gridSpacing}>\n                    <Grid item>\n                        <Typography variant=\"h1\" component=\"h2\" className='headingcard' \n                        sx={{ marginTop:'10px' ,  \n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'} , \n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040', }}>\n                            {title}\n                        </Typography>\n                    </Grid>\n\n                    {value !== undefined && (\n                        <Grid item>\n                            {/* {options && (role == 'teacher' || role == 'super_admin') && ( */}\n                            <TextField\n                                id=\"standard-select-currency\"\n                                select\n                                value={value}\n                                onChange={(e) => setValue(e.target.value)}\n                                sx={{ width: '110px', height: '40px' }}\n                            >\n                                {options.map((option) => (\n                                    <MenuItem key={option.value} value={option.value}>\n                                        {option.label}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                            {/* )} */}\n                        </Grid>\n                    )}\n                </Grid>\n            </Box>\n       \n    );\n});\n\nexport default HeadingCard;\n","import PropTypes from 'prop-types';\nimport { useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Fragment } from 'react';\nimport { Grid, Typography, IconButton, Tooltip, RadioGroup, FormControlLabel, Radio } from '@mui/material';\n\nimport CloseOutlinedIcon from '@mui/icons-material/CloseOutlined';\nimport AddCircleOutlinedIcon from '@mui/icons-material/AddCircleOutlined';\n\n// Props needed for component formik ,correctOption, setCorrectOption , optionValue , formikFieldName , PlaceHOLDER\nconst FileInput = ({ formik, fieldName, placeHolder, accept }) => {\n    \n    const dispatch = useDispatch();\n    const fileRef1 = useRef();\n\n    return (\n        <>\n            <Grid item className=\"displayFlex\">\n                <Fragment>\n                    <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Add Image' : 'Add File'}>\n                        <IconButton color=\"primary\" aria-label=\"delete\" size=\"large\" onClick={() => fileRef1.current.click()}>\n                            <AddCircleOutlinedIcon sx={{ fontSize: '3.0rem' }} />\n                        </IconButton>\n                    </Tooltip>\n\n                    <input\n                        hidden\n                        ref={fileRef1}\n                        fullWidth\n                        type=\"file\"\n                        className=\"chooseFileInput\"\n                        accept={accept}\n                        onChange={(event) => {\n                            \n                            formik.setFieldValue(fieldName, event.currentTarget.files[0]);\n                        }}\n                        error={formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`])}\n                        helperText={formik.touched[`${fieldName}`] && formik.errors[`${fieldName}`]}\n                    />\n\n                    <Grid className=\"displayFlex\">\n                        {formik?.values[`${fieldName}`]?.name?.length < 40 ? (\n                            <Typography mt={3.5} variant=\"h5\">\n                                {formik.values[`${fieldName}`]?.name}\n                            </Typography>\n                        ) : (\n                            <Typography mt={3.5} variant=\"h5\">\n                                {formik.values[`${fieldName}`]?.name?.substring(0, 40)}\n                            </Typography>\n                        )}\n                        {formik?.values[`${fieldName}`] && (\n                            <Typography mt={3.5} variant=\"h5\" ml={2}>\n                                {'(' + (formik.values[`${fieldName}`]?.size / 1000000).toFixed(2) + '  mb)'}\n                            </Typography>\n                        )}\n\n                            \n                        {formik.values[`${fieldName}`] ? (\n                            <Tooltip placement=\"top\" title={accept == 'image/*' ? 'Clear Image' : 'Clear Audio'}>\n                                <IconButton\n                                    style={{ marginTop: '2px' }}\n                                    color=\"primary\"\n                                    aria-label=\"delete\"\n                                    size=\"large\"\n                                    onClick={() => {\n                                        formik.setFieldValue(fieldName, null);\n                                        fileRef1.current.value = null;\n                                    }}\n                                >\n                                    \n\n                                    <CloseOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                    \n                                    \n                                </IconButton>\n                            </Tooltip>\n                        ) : (\n                            <Typography mt={3.5} variant=\"h5\">\n                                {placeHolder}\n                            </Typography>\n                        )}\n                    </Grid>\n                </Fragment>\n            </Grid>\n\n            <Grid item>\n                <p className={'fileError'}>\n                    {formik.touched[`${fieldName}`] && Boolean(formik.errors[`${fieldName}`]) ? formik.errors[`${fieldName}`] : ''}\n                </p>\n            </Grid>\n        </>\n    );\n};\n\nexport default FileInput;\n"],"sourceRoot":""}