{"version":3,"sources":["views/pages/subAdmin/brands/brandCategory/component/addUpdateBrandCategory.js","views/pages/subAdmin/brands/brandCategory/component/deleteBrandCategoryDialog.js","views/pages/subAdmin/brands/brandCategory/component/brandCategoryTable.js","views/pages/subAdmin/brands/brandCategory/index.js","ui-component/extended/Avatar.js"],"names":["Transition","forwardRef","props","ref","_jsx","Slide","_objectSpread","direction","AddUpdateBrandCategoryDialog","_ref","open","setOpen","brandCategoryData","page","limit","search","user","useSelector","state","auth","dispatch","useDispatch","categoryArray","brandCategoryReducer","categoriesDropdownList","_useState","useState","_useState2","_slicedToArray","category","setCategory","_useState3","_useState4","isUpdate","setIsUpdate","_useState5","_useState6","loader","setLoader","useEffect","categoryId","checkWallet","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","_window$ethereum","response","connectWallet","wrap","_context","prev","next","window","ethereum","request","method","sent","_metamask","isUnlocked","type","SNACKBAR_OPEN","message","variant","alertSeverity","console","log","utils","getAddress","walletAddress","abrupt","stop","apply","arguments","handleContractDeployment","_ref3","_callee2","_categoryName","_yield$factoryAddr$de","_res$events$","brandName","categoryName","contractName","symbol","provider","signer","factoryAddr","res","addr","_context2","brand","name","categories","map","data","value","label","substring","ethers","providers","Web3Provider","getSigner","Contract","FactoryAddress","address","FactoryAbi","deployMintingContract","catch","error","t1","t0","t2","wait","events","args","addBrandCategory","brandId","profitPercentage","formik","values","contractAddress","handleClose","validationSchema","Yup","default","min","max","required","typeError","useFormik","enableReinitialize","initialValues","onSubmit","updateBrandCategory","resetForm","getAllCategoriesDropdown","_Fragment","children","_jsxs","Dialog","className","maxWidth","TransitionComponent","keepMounted","DialogTitle","id","Divider","DialogContent","noValidate","handleSubmit","Grid","container","item","xs","pt","TextField","select","fullWidth","onChange","event","target","MenuItem","option","index","handleChange","touched","Boolean","errors","helperText","DialogActions","sx","display","margin","CircularProgress","AnimateButton","Button","width","background","size","disableElevation","onClick","my","ml","color","DeleteBrandCategoryDialog","theme","useTheme","DialogContentText","Typography","component","pr","palette","dark","borderColor","deleteBrandCategory","BrandCategoryTable","brandCategoriesList","addUpdateOpen","setAddUpdateOpen","navigate","setBrandCategoryData","useNavigate","deleteOpen","setDeleteOpen","TableContainer","undefined","brandCategories","justifyContent","m","disableShrink","count","Table","TableHead","TableRow","TableCell","align","borderBottom","TableBody","padding","row","_defineProperty","textTransform","lg","Avatar","alt","src","Category","image","moment","createdAt","format","updatedAt","Stack","Tooltip","placement","title","IconButton","brandData","RemoveRedEyeIcon","fontSize","style","fontWeight","BrandCategory","_location$state","_location$state2","_location$state4","_location$state4$bran","location","useLocation","brandCategoriesByAdminList","setSearch","setPage","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","_location$state3","_location$state3$bran","getAllBrandCategoriesByAdmin","adminId","MainCard","marginTop","marginLeft","md","mode","secondary","float","role","content","spacing","OutlinedInput","placeholder","startAdornment","InputAdornment","position","IconSearch","stroke","e","p","gridSpacing","Pagination","showFirstButton","showLastButton","pages","newPage","outline","others","_objectWithoutProperties","_excluded","colorSX","paper","bgcolor","concat","outlineSX","border","sizeSX","height","MuiAvatar"],"mappings":"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","file":"static/js/61.ab285e4c.chunk.js","sourcesContent":["import { forwardRef, useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ethers, utils } from 'ethers';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport AnimateButton from 'ui-component/extended/AnimateButton';\nimport { updateBrandCategory, addBrandCategory, getAllCategoriesDropdown } from 'redux/brandCategory/actions';\nimport {\n    MenuItem,\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Slide,\n    TextField,\n    Divider,\n    Grid,\n    CircularProgress\n} from '@mui/material';\nimport FactoryAbi from '../../../../../../contractAbi/Factory.json';\nimport FactoryAddress from '../../../../../../contractAbi/Factory-address.json';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport BLOCKCHAIN from '../../../../../../constants';\nimport { SNACKBAR_OPEN } from 'store/actions';\n\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\n\nexport default function AddUpdateBrandCategoryDialog({ open, setOpen, brandCategoryData, page, limit, search }) {\n    const user = useSelector((state) => state.auth.user);\n    const dispatch = useDispatch();\n    const categoryArray = useSelector((state) => state.brandCategoryReducer.categoriesDropdownList);\n    const [category, setCategory] = useState(0);\n    const [isUpdate, setIsUpdate] = useState(false);\n    const [loader, setLoader] = useState(false);\n\n    useEffect(() => {\n        if (brandCategoryData.categoryId == 0) {\n            setIsUpdate(false);\n        } else {\n            setIsUpdate(true);\n        }\n        setCategory(brandCategoryData.categoryId);\n    }, [brandCategoryData]);\n\n    const handleCategoryChange = (event) => {\n        setCategory(event.target.value);\n    };\n\n    const checkWallet = async () => {\n        const response = await window?.ethereum?.request({ method: 'eth_requestAccounts' });\n        let connectWallet = await ethereum._metamask.isUnlocked();\n\n        if ((window.ethereum && connectWallet) == false) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'No crypto wallet found. Please connect one',\n                variant: 'alert',\n                alertSeverity: 'info'\n            });\n            console.log('No crypto wallet found. Please install it.');\n            // toast.error('No crypto wallet found. Please install it.');\n        } \n        \n        // else if (window?.ethereum?.networkVersion !== '5') {\n        //     dispatch({\n        //         type: SNACKBAR_OPEN,\n        //         open: true,\n        //         message: 'Please change your Chain ID to Goerli',\n        //         variant: 'alert',\n        //         alertSeverity: 'info'\n        //     });\n        //     console.log('Please change your Chain ID to Goerli');\n        // } \n        \n        else if (utils?.getAddress(response[0]) !== user.walletAddress) {\n            dispatch({\n                type: SNACKBAR_OPEN,\n                open: true,\n                message: 'Please connect your registered Wallet Address',\n                variant: 'alert',\n                alertSeverity: 'info'\n            });\n            console.log('Please connect your registered Wallet Address');\n        } else {\n            return true;\n        }\n    };\n\n    const handleContractDeployment = async () => {\n        if (await checkWallet()) {\n            setLoader(true);\n            let brandName = brandCategoryData?.brand.name;\n            let categoryName;\n            categoryArray.categories.map((data) => {\n                if (data.value == category) {\n                    categoryName = data.label;\n                }\n            });\n            const contractName = 'Galileo' + ' ' + brandName + ' ' + categoryName;\n            const symbol = 'G' + brandName?.substring(0, 1) + categoryName?.substring(0, 1);\n            const provider = new ethers.providers.Web3Provider(window.ethereum);\n            const signer = provider.getSigner();\n            const factoryAddr = new ethers.Contract(FactoryAddress.address, FactoryAbi, signer);\n\n            let res = await (\n                await factoryAddr.deployMintingContract(contractName, symbol).catch((error) => {\n                    setOpen(false);\n                    setLoader(false);\n                    console.log('error',error);\n                })\n            )?.wait();\n\n            let addr = res?.events[2]?.args[0];\n            if (res) {\n                dispatch(\n                    addBrandCategory({\n                        brandId: brandCategoryData.brandId,\n                        categoryId: category,\n                        profitPercentage: formik.values.profitPercentage,\n                        contractAddress: addr,\n                        page: page,\n                        limit: limit,\n                        search: search,\n                        handleClose: handleClose\n                    })\n                );\n            }\n        }\n    };\n\n    const validationSchema = Yup.object({\n        isUpdate: Yup.boolean().default(isUpdate),\n        profitPercentage: Yup.number()\n            .min(1, 'Profit Percentage should not be less than one')\n            .max(99, 'Profit Percentage should not exceed 99')\n            .required('Profit Percentage is required')\n            .typeError('Invalid Profit Percentage')\n    });\n\n    const formik = useFormik({\n        enableReinitialize: true,\n        initialValues: brandCategoryData,\n        validationSchema,\n        onSubmit: (values) => {\n            if (!isUpdate) {\n                handleContractDeployment();\n            } else {\n                dispatch(\n                    updateBrandCategory({\n                        brandId: brandCategoryData.brandId,\n                        categoryId: brandCategoryData.categoryId,\n                        profitPercentage: values.profitPercentage,\n                        page: page,\n                        limit: limit,\n                        search: search,\n                        handleClose: handleClose\n                    })\n                );\n            }\n        }\n    });\n    const handleClose = () => {\n        setOpen(false);\n        formik.resetForm();\n        setLoader(false);\n    };\n\n    useEffect(() => {\n        dispatch(getAllCategoriesDropdown({ brandId: brandCategoryData.brandId }));\n    }, []);\n\n    return (\n        <>\n            <Dialog\n                open={open}\n                // onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n                className=\"adminDialog dialog\"\n                maxWidth=\"sm\"\n                TransitionComponent={Transition}\n                keepMounted\n                aria-describedby=\"alert-dialog-slide-description1\"\n            >\n                <DialogTitle id=\"form-dialog-title\" className=\"assignheading\">\n                    {!isUpdate ? 'Assign Category ' : ' Update Profit '}\n                </DialogTitle>\n                <Divider />\n                <DialogContent>\n                    <form noValidate onSubmit={formik.handleSubmit} id=\"validation-forms\">\n                        <Grid container>\n                            <>\n                                {!isUpdate && (\n                                    <Grid item xs={12} pt={2}>\n                                        <TextField\n                                            className=\"responsiveSelectfield textfieldStyle field\"\n                                            id=\"outlined-select-budget\"\n                                            select\n                                            fullWidth\n                                            label=\"Select Category\"\n                                            value={category}\n                                            onChange={handleCategoryChange}\n                                            variant=\"standard\"\n                                        >\n                                            <MenuItem value={0}>Choose Category</MenuItem>\n                                            {categoryArray &&\n                                                categoryArray.categories &&\n                                                categoryArray.categories.map((option, index) => (\n                                                    <MenuItem key={index} value={option.value}>\n                                                        {option.label}\n                                                    </MenuItem>\n                                                ))}\n                                        </TextField>\n                                    </Grid>\n                                )}\n\n                                <Grid item xs={12} pt={2}>\n                                    <TextField\n                                        className=\"textfieldStyle field\"\n                                        variant=\"standard\"\n                                        id=\"profitPercentage\"\n                                        name=\"profitPercentage\"\n                                        label=\"Enter Profit Percentage\"\n                                        value={formik.values.profitPercentage}\n                                        onChange={formik.handleChange}\n                                        error={formik.touched.profitPercentage && Boolean(formik.errors.profitPercentage)}\n                                        helperText={formik.touched.profitPercentage && formik.errors.profitPercentage}\n                                        fullWidth\n                                    />\n                                </Grid>\n                            </>\n                        </Grid>\n                    </form>\n                </DialogContent>\n\n                <DialogActions sx={{ display: 'block', margin: '10px 10px 0px 20px' }}>\n                    {loader ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <AnimateButton>\n                                <Button\n                                    variant=\"contained\"\n                                    className=\"buttons\"\n                                    sx={{ width: '92%',\n                                    margin: '0px 0px 10px 8px', \n                                        background: 'linear-gradient(97.63deg, #2F57FF 0%, #2FA3FF 108.45%)'\n                                    }}\n                                    type=\"submit\"\n                                    size=\"large\"\n                                    disableElevation\n                                    onClick={() => {\n                                        formik.handleSubmit();\n                                    }}\n                                >\n                                    {!isUpdate ? 'Create ' : 'Update '}\n                                </Button>\n                                </AnimateButton>\n                                <AnimateButton>\n                                <Button\n                                    className=\"buttons\"\n                                    variant=\"outlined\"\n                                    sx={{ my: 1, ml: 0, width: '95%', margin: '0px 0px 10px 0px', color: '#4044ED' }}\n                                    onClick={handleClose}\n                                    color=\"secondary\"\n                                    size=\"large\"\n                                >\n                                    Cancel\n                                </Button>\n                            </AnimateButton>\n                        </>\n                    )}\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import { forwardRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useTheme } from '@mui/material/styles';\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Slide, DialogContentText, Typography } from '@mui/material';\nimport { deleteBrandCategory } from '../../../../../../redux/brandCategory/actions';\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\nexport default function DeleteBrandCategoryDialog({ open, setOpen, page, limit, search, brandCategoryData }) {\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                // onClose={handleClose}\n                aria-labelledby=\"alert-dialog-slide-title1\"\n                aria-describedby=\"alert-dialog-slide-description1\"\n            >\n                <DialogTitle id=\"alert-dialog-slide-title1\"  className=\"assignheading\">Delete Brand Category</DialogTitle>\n\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description1\">\n                        <Typography variant=\"body2\" component=\"span\" className=\"statustypo\" >\n                            Are you sure you want to delete this Category?\n                        </Typography>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions sx={{ pr: 2.5 }}>\n                    <Button\n                        sx={{ color: theme.palette.error.dark, borderColor: theme.palette.error.dark }}\n                        onClick={handleClose}\n                        color=\"secondary\"  className='buttonSize' size='large' \n                    >\n                        No\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        className='buttonSize' size='large' \n                        onClick={() => {\n                            dispatch(\n                                deleteBrandCategory({\n                                    categoryId: brandCategoryData.categoryId,\n                                    brandId: brandCategoryData.brandId,\n                                    page: page,\n                                    limit: limit,\n                                    search: search,\n                                    handleClose: handleClose\n                                })\n                            );\n                        }}\n                    >\n                        Yes\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n","import { useState } from 'react';\nimport { useTheme } from '@mui/material/styles';\n\nimport { useNavigate } from 'react-router-dom';\nimport {\n    Divider,\n    Typography,\n    IconButton,\n    Grid,\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    Button,\n    TableRow,\n    Tooltip,\n    Stack,\n    CircularProgress\n} from '@mui/material';\n\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport AddUpdateBrandCategoryDialog from './addUpdateBrandCategory';\nimport DeleteBrandCategoryDialog from './deleteBrandCategoryDialog';\nimport Avatar from 'ui-component/extended/Avatar';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport RemoveRedEyeIcon from '@mui/icons-material/RemoveRedEye';\nimport moment from 'moment';\n\nconst BrandCategoryTable = ({\n    brandCategoriesList,\n    search,\n    page,\n    limit,\n    addUpdateOpen,\n    setAddUpdateOpen,\n    brandCategoryData,\n    setBrandCategoryData\n}) => {\n    const navigate = useNavigate();\n    const [deleteOpen, setDeleteOpen] = useState(false);\n    const [detailId, setDetailId] = useState();\n    const theme = useTheme();\n\n    const openDetails = (id) => {\n        if (detailId === id) {\n            setDetailId(null);\n        } else {\n            setDetailId(id);\n        }\n    };\n\n    return (\n        <TableContainer>\n            <AddUpdateBrandCategoryDialog\n                open={addUpdateOpen}\n                setOpen={setAddUpdateOpen}\n                brandCategoryData={brandCategoryData}\n                page={page}\n                limit={limit}\n                search={search}\n            />\n\n            <DeleteBrandCategoryDialog\n                open={deleteOpen}\n                setOpen={setDeleteOpen}\n                page={page}\n                limit={limit}\n                search={search}\n                brandCategoryData={brandCategoryData}\n            />\n            {brandCategoriesList.brandCategories == undefined ? (\n                <Grid container justifyContent=\"center\" sx={{ width: '80%', m: '15px auto '}}>\n            <Grid item>\n        <CircularProgress disableShrink size={'4rem'} />\n    </Grid>\n            </Grid>):(<>\n            {brandCategoriesList.brandCategories != undefined && brandCategoriesList.count > 0 ? (\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"center\" sx={{ borderBottom: 'none' }}></TableCell>\n                        <TableCell align=\"left \" className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                            Category name{' '}\n                        </TableCell>\n                          <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Profit Percentage</TableCell>\n                    {/* <TableCell   className='Tableheading' sx={{borderBottom:'none'}}>Description</TableCell> */}\n\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                            Created At\n                        </TableCell>\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                            Updated At\n                        </TableCell>\n                        <TableCell className=\"Tableheading\" sx={{ borderBottom: 'none' }}>\n                            Actions\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                    <TableBody sx={{ padding: '10px' }}>\n                        {brandCategoriesList.brandCategories != undefined &&\n                            brandCategoriesList.brandCategories.map((row, index) => (\n                                <>\n                                    <TableRow>\n                                        <TableCell align=\"right\" sx={{ borderBottom: 'none' }}></TableCell>\n                                        <TableCell\n                                            sx={{\n                                                display: 'flex',\n                                                borderBottom: 'none',\n                                                textTransform: 'capitalize',\n                                                borderBottom: 'none'\n                                            }}\n                                        >\n                                            <Grid item lg={6}>\n                                                <Avatar alt=\"Brand Image\" src={row.Category.image} sx={{}} />\n                                            </Grid>\n                                            <Grid item lg={6} className=\"tableName\">\n                                                {row.Category.name}\n                                            </Grid>\n                                        </TableCell>\n\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\n                                            {row.profitPercentage}%\n                                        </TableCell>\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\n                                            {moment(row.createdAt).format('DD-MMM-YYYY')}\n                                        </TableCell>\n                                        <TableCell className=\"tablecell\" sx={{ borderBottom: 'none' }}>\n                                            {moment(row.updatedAt).format('DD-MMM-YYYY')}\n                                        </TableCell>\n\n                                        <TableCell align=\"left\" sx={{ padding: '0px', borderBottom: 'none' }}>\n                                            <Stack direction=\"row\">\n                                                <Tooltip placement=\"top\" title=\" View NFT'S\">\n                                                    <IconButton\n                                                        color=\"primary\"\n                                                        aria-label=\"detail\"\n                                                        size=\"medium\"\n                                                        onClick={() => {\n                                                            navigate('/nftManagement', {\n                                                                state: {\n                                                                    brandData: row\n                                                                }\n                                                            });\n                                                        }}\n                                                    >\n                                                        <RemoveRedEyeIcon sx={{ fontSize: '1.5rem' }} />\n                                                    </IconButton>\n                                                </Tooltip>\n\n                                                {/* <Tooltip placement=\"top\" title=\"Edit\">\n                                                    <IconButton\n                                                        sx={{ color: '#008b04' }}\n                                                        aria-label=\"Edit\"\n                                                        size=\"large\"\n                                                        onClick={() => {\n                                                            setAddUpdateOpen(true);\n                                                            setBrandCategoryData({\n                                                                categoryId: row.CategoryId,\n                                                                brandId: row.BrandId,\n                                                                profitPercentage: row.profitPercentage\n                                                            });\n                                                        }}\n                                                    >\n                                                        <EditOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                                    </IconButton>\n                                                </Tooltip> */}\n                                                {/* <Tooltip placement=\"top\" title=\"Delete\">\n                                                    <IconButton\n                                                        color=\"primary\"\n                                                        sx={{\n                                                            color: theme.palette.orange.dark,\n                                                            borderColor: theme.palette.orange.main,\n                                                            '&:hover ': { background: theme.palette.orange.light }\n                                                        }}\n                                                        size=\"large\"\n                                                        onClick={() => {\n                                                            setDeleteOpen(true);\n                                                            setBrandCategoryData({\n                                                                categoryId: row.CategoryId,\n                                                                brandId: row.BrandId\n                                                            });\n                                                        }}\n                                                    >\n                                                        <DeleteOutlineOutlinedIcon sx={{ fontSize: '1.5rem' }} />\n                                                    </IconButton>\n                                                </Tooltip> */}\n                                            </Stack>\n                                        </TableCell>\n                                    </TableRow>\n                                </>\n                            ))}\n                    </TableBody>\n          \n            </Table>\n           ) : (\n                <>\n                  \n                    <Grid item>\n                        <Typography className=\"statustypo\" style={{     padding: '20px 20px 20px 70px', \n                        fontWeight: '500' }}> No Data Available</Typography>\n                    </Grid>\n                </>\n            )}\n            </>)}\n        </TableContainer>\n    );\n};\n\nexport default BrandCategoryTable;\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport { gridSpacing } from 'store/constant';\nimport { useTheme } from '@mui/material/styles';\nimport BrandCategoryTable from './component/brandCategoryTable';\nimport { Button, Typography, Grid, MenuItem, Menu, Pagination, OutlinedInput, InputAdornment } from '@mui/material';\nimport { IconSearch } from '@tabler/icons';\nimport { getAllBrandCategories, getAllBrandCategoriesByAdmin, getAllCategoriesDropdown } from '../../../../../redux/brandCategory/actions';\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded';\nimport MainCard from 'ui-component/cards/MainCard';\nimport AddUpdateBrandCategoryDialog from './component/addUpdateBrandCategory';\nimport { userStory } from 'store/kanban';\n\nconst BrandCategory = () => {\n    const user = useSelector((state) => state.auth.user);\n    const theme = useTheme();\n    const dispatch = useDispatch();\n    const location = useLocation();\n    const navigate = useNavigate();\n    const brandCategoriesList = useSelector((state) => state.brandCategoryReducer.brandCategoriesByAdminList);\n    const [search, setSearch] = useState('');\n    const [page, setPage] = useState(1);\n    const [limit, setLimit] = useState(10);\n    const [addUpdateOpen, setAddUpdateOpen] = useState(false);\n    const [brandCategoryData, setBrandCategoryData] = useState({\n        brand: location?.state?.brandData,\n        brandId: location?.state?.brandData.id,\n        categoryId: 0,\n        profitPercentage: ''\n    });\n    const [anchorEl, setAnchorEl] = useState(null);\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleCloseMenu = () => {\n        setAnchorEl(null);\n    };\n\n    useEffect(() => {\n        dispatch(\n            getAllBrandCategoriesByAdmin({\n                brandId: location?.state?.brandData?.id,\n                search: search,\n                page: page,\n                limit: limit,\n                adminId: user.id\n            })\n        );\n    }, [search, page, limit]);\n  \n    return (\n        <>\n            <AddUpdateBrandCategoryDialog\n                open={addUpdateOpen}\n                setOpen={setAddUpdateOpen}\n                brandCategoryData={brandCategoryData}\n                page={page}\n                limit={limit}\n                search={search}\n            />\n            <MainCard\n            className='Adminheading'\n\n                title={\n                    <Typography variant=\"h1\" component=\"h2\" className='headingcard' sx={{ marginTop:'10px' ,  \n                        fontWeight: 600, color: '#000' , marginLeft:{lg:'-20px', md:'-20px'}, \n                        background: theme.palette.mode === 'dark' ? 'black' : '#f3f3f3',\n                        color: theme.palette.mode === 'dark' ? 'white' : '#404040' }}>\n                           \n                        Brand Management\n                    </Typography>\n                }\n                secondary={\n                    <Button className='buttonSize' sx={{float:'right'}}\n                    variant=\"contained\"\n                    size=\"large\"\n                    onClick={() => {\n                      { user?.role== 'Admin' ?  navigate('/brandsByAdmin') : navigate('/brands')}  \n                    }}\n                >\n                    Back\n                </Button>\n                }\n                content={false}\n            ></MainCard>\n\n            <MainCard\n            className='tableShadow'\n            title={\n                <Grid container spacing={4} >\n                <Grid item xs={6} lg={8} >\n                <Typography className='mainheading' variant=\"h1\" component=\"h2\"\n                 sx={{marginLeft:{lg:'48px', md:'48px'}}}>\n                 Category Management of : {location?.state?.brandData?.name}\n              </Typography>\n                </Grid>\n                    <Grid item xs={3} lg={2} >\n                   \n                    <OutlinedInput\n                    id=\"input-search-list-style1\"\n                    placeholder=\"Search\"\n                    startAdornment={\n                        <InputAdornment position=\"start\">\n                            <IconSearch stroke={1.5} size=\"1rem\" />\n                        </InputAdornment>\n                    }\n                    size=\"small\"\n                    onChange={(e) => {\n                        setSearch(e.target.value);\n                    }}\n                />\n                    </Grid>\n                    {/* <Grid item xs={3} lg={2} textAlign=\"start\">\n                        <Button className='buttonSize' sx={{marginLeft:{lg:'-16px', md:'-16px'}}}\n                            variant=\"contained\"\n                            size=\"large\"\n                            onClick={() => {\n                                setAddUpdateOpen(true);\n                                setBrandCategoryData({\n                                    brand: location.state.brandData,\n                                    brandId: location.state.brandData.id,\n                                    categoryId: 0,\n                                    profitPercentage: ''\n                                });\n                                dispatch(getAllCategoriesDropdown({ brandId: location.state.brandData.id }));\n                            }}\n                        >\n                        Create\n                        </Button>\n                    </Grid> */}\n                </Grid> }\n                content={false}\n            >\n                <BrandCategoryTable\n                    brandCategoriesList={brandCategoriesList}\n                    search={search}\n                    page={page}\n                    limit={limit}\n                    addUpdateOpen={addUpdateOpen}\n                    setAddUpdateOpen={setAddUpdateOpen}\n                    brandCategoryData={brandCategoryData}\n                    setBrandCategoryData={setBrandCategoryData}\n                />\n\n                <>\n                    <Grid item xs={12} sx={{ p: 3 }}>\n                        <Grid container justifyContent=\"center\" spacing={gridSpacing}>\n                            <Grid item>\n                                <Pagination\n                                    color=\"primary\"\n                                    showFirstButton\n                                    showLastButton\n                                    page={page}\n                                    count={brandCategoriesList.pages}\n                                    onChange={(event, newPage) => {\n                                        setPage(newPage);\n                                    }}\n                                />\n                            </Grid>\n                          \n                        </Grid>\n                    </Grid>\n                </>\n            </MainCard>\n        </>\n    );\n};\n\nexport default BrandCategory;\n","import PropTypes from 'prop-types';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport MuiAvatar from '@mui/material/Avatar';\n\n// ==============================|| AVATAR ||============================== //\n\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\n    const theme = useTheme();\n\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\n    const outlineSX = outline && {\n        color: color ? `${color}.main` : `primary.main`,\n        bgcolor: theme.palette.background.paper,\n        border: '2px solid',\n        borderColor: color ? `${color}.main` : `primary.main`\n    };\n    let sizeSX = {};\n    switch (size) {\n        case 'badge':\n            sizeSX = {\n                width: theme.spacing(3.5),\n                height: theme.spacing(3.5)\n            };\n            break;\n        case 'xs':\n            sizeSX = {\n                width: theme.spacing(4.25),\n                height: theme.spacing(4.25)\n            };\n            break;\n        case 'sm':\n            sizeSX = {\n                width: theme.spacing(5),\n                height: theme.spacing(5)\n            };\n            break;\n        case 'lg':\n            sizeSX = {\n                width: theme.spacing(9),\n                height: theme.spacing(9)\n            };\n            break;\n        case 'xl':\n            sizeSX = {\n                width: theme.spacing(10.25),\n                height: theme.spacing(10.25)\n            };\n            break;\n        case 'md':\n            sizeSX = {\n                width: theme.spacing(7.5),\n                height: theme.spacing(7.5)\n            };\n            break;\n        default:\n            sizeSX = {};\n    }\n\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\n};\n\nAvatar.propTypes = {\n    className: PropTypes.string,\n    color: PropTypes.string,\n    outline: PropTypes.bool,\n    size: PropTypes.string,\n    sx: PropTypes.object\n};\n\nexport default Avatar;\n"],"sourceRoot":""}