{"version":3,"sources":["views/pages/superAdmin/sbtToken/component/sbtView.js"],"names":["Transition","forwardRef","props","ref","_jsx","Slide","_objectSpread","direction","DetailsDialog","_ref","open","setOpen","details","sbtTable","theme","useTheme","handleClose","_useState","useState","_useState2","_slicedToArray","checked","setChecked","_useState3","_useState4","signer","ethers","providers","Web3Provider","window","ethereum","getSigner","Contract","SBTAddress","address","SBTAbi","abi","children","_jsxs","Dialog","fullScreen","onClose","TransitionComponent","DialogActions","sx","pr","pt","cursor","Button","className","size","color","palette","error","dark","onClick","CloseIcon","SoulBoundMetas","map","nft","index","Grid","container","pl","item","xs","md","lg","List","ListItemButton","ListItemText","primary","Typography","variant","secondary","textTransform","fieldName","fieldValue","Tooltip","title","placement","arrow","Switch","onChange","e","target","alert","_Fragment","Divider","CardMedia","component","minheight","maxHeight","overflow"],"mappings":"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","file":"static/js/20.80c25136.chunk.js","sourcesContent":["import { forwardRef, useState } from 'react';\n// material-ui\nimport { AppBar, DialogActions, Button, Dialog, CardMedia, Divider, Grid, IconButton, ListItemText, ListItemButton, List, Slide, Toolbar, Typography, Tooltip } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n// assets\nimport CloseIcon from '@mui/icons-material/Close';\n// slide animation\nconst Transition = forwardRef((props, ref) => <Slide direction=\"up\" ref={ref} {...props} />);\nimport { Switch } from '@mui/material';\nimport { ethers, utils } from 'ethers';\nimport SBTAddress from \"contractAbi/SBT-address.json\";\nimport SBTAbi from \"contractAbi/SBT.json\";\n// ===============================|| UI DIALOG - FULL SCREEN ||=============================== //\n\nexport default function DetailsDialog({ open, setOpen, sbtTable, details }) {\n    const theme = useTheme();\n    // console.log(details.SoulBoundMetas, 'details====================?')\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const [checked, setChecked] = useState(true);\n    const [check, setCheck] = useState(true);\n    const status = [\n        {\n            name: 'Name:',\n            // value: nftData?.name\n        },\n        {\n            name: 'Status:',\n            // value: nftData?.status\n        },\n        {\n            name: 'Description:',\n            // value: nftData?.description\n        },\n    ];\n    // const walletadded = (event, index) => {\n    //     // setWallettoggle(true);\n    //     setChecked(event.target.checked);\n    //     {event.target.checked==false&&(console.log(\"workinggggg\"))}\n    //     console.log(\"-----------------------\",event.target.checked);\n    // };\n    // console.log(\"43\", checked)\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const sbt = new ethers.Contract(SBTAddress.address, SBTAbi.abi, signer);\n    async function myFunction() {\n        return\n        // changeStatus(\n        //     address to,\n        //     uint256 _tokenId,\n        //     bool _status\n        // )\n    };\n    return (\n        <div>\n            <Dialog fullScreen open={open}\n                onClose={handleClose}\n                TransitionComponent={Transition}>\n                {/*    <IconButton float=\"left\" color=\"inherit\" onClick={handleClose} aria-label=\"close\" size=\"large\">\n                    <CloseIcon />\n                </IconButton> */}\n                <DialogActions sx={{ pr: 2.5, pt: 2.5, cursor: \"pointer\" }}>\n                    <Button className='buttonSize' size='large' sx={{ color: theme.palette.error.dark }} onClick={handleClose} color=\"secondary\">\n                        <CloseIcon />\n                    </Button>\n                </DialogActions>\n                {details.SoulBoundMetas &&\n                    details.SoulBoundMetas.map((nft, index) => {\n                        return (\n                            <Grid container sx={{ pr: 2.5, pl: 2.5, pt: 2.5 }}>\n                                <Grid item xs={12} md={8} lg={8} sx={{ pr: 2.5 }}>\n                                    <List>\n                                        <ListItemButton>\n                                            <ListItemText\n                                                primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Field Name</Typography>}\n                                                secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{ textTransform: 'capitalize' }}>{nft.fieldName}</Typography>}\n                                            />\n                                            <ListItemButton>\n                                                <ListItemText\n                                                    primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Field Value</Typography>}\n                                                    secondary={<Typography variant=\"caption\" className='font-in-detail'>{nft.fieldValue ? nft.fieldValue : \"null\"}</Typography>}\n                                                />\n                                                {nft?.fieldValue == 'true' ?\n                                                    <ListItemButton>\n                                                        <ListItemText\n                                                            primary={<Typography variant=\"subtitle1\" className='font-in-detail'>Toggle</Typography>}\n                                                            secondary={<Typography variant=\"caption\" className='font-in-detail' sx={{ textTransform: 'capitalize' }}>\n                                                                <Tooltip\n                                                                    className=\"fontsize\"\n                                                                    title=\"SBT\"\n                                                                    placement=\"top\"\n                                                                    arrow\n                                                                >\n                                                                    <Switch\n                                                                        // value={nft?.fieldValue == true ? checked : false}\n                                                                        checked={nft?.fieldValue == 'true' && checked}\n                                                                        onChange={(e) => {\n                                                                            setChecked(e.target.checked);\n                                                                            if (e.target.checked == false) {\n                                                                                alert(\"workingggg\")\n                                                                                // myFunction();\n                                                                            }\n                                                                            // else{\n                                                                            //     alert(\"not workinggggggg\");\n                                                                            // }\n                                                                        }}\n                                                                    />\n                                                                </Tooltip>\n                                                            </Typography>\n                                                            }\n                                                        />\n                                                    </ListItemButton> :\n                                                    <></>\n                                                }\n\n\n                                            </ListItemButton>\n                                        </ListItemButton>\n                                        <Divider />\n                                    </List>\n                                </Grid>\n                                <Grid item xs={12} md={4} lg={4}>\n                                    <CardMedia\n\n                                        component=\"img\"\n                                        // image={nftData?.asset}\n                                        sx={{\n                                            minheight: 'auto', maxHeight: '570px',\n                                            overflow: 'hidden', cursor: 'Pointer'\n                                        }}\n                                    />\n                                </Grid></Grid>\n                        );\n                    })}\n            </Dialog>\n        </div>\n    );\n}\n"],"sourceRoot":""}